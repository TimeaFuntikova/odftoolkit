##################################################################
##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##  http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
##################################################################
## Context:
##
## The Velocity context is added up in the SchemaToTemplate.java
## xmlModel - Represents an ODF grammar parsed by MSV with all relevant informations and usabiltiy functions
## xmlModelHistory - sorted list from latest to earliest release to assist in finding new XML node additions (see odf-reference-template.vm)
## But the Velocity context can also be extended by parameters from the calling main-template.
##
#set ($element = ${xmlModel.getElement($contextNode)})
#set ($baseName = ${codeModel.getBaseName($contextNode)})
#set ($base = ${codeModel.getBaseClass($baseName)})
#set ($className = "${xmlModel.camelCase($base)}ElementBase")
##
## Set Superclass
## STYLE SETTING (START)
## ToDo: Move the following complexity "BASE CLASS STYLABLE" into SourceCodeModel.getBaseClass()
## 1) Every stylable element inherits from "OdfStylableElement"
## 2) Unless the stylable element is from @style:family="draw:graphc" or "presentation:presenation" than inherits from "OdfStyleableShapeElement"
## 3) Otherwise ever ODF element inherits from "OdfElement"
#if ($odfModel.isStylable($element))
## 1) Every stylable element inherits from "OdfStylableElement"
#set ($stylable = true)
#if (!${codeModel.hasSuperClass($contextNode)} && !${codeModel.hasSuperClass($baseName)})
#set ($superClassName = "OdfStylableElement")
#set ($superClassPackageName = "org.odftoolkit.odfdom.dom.element")
#end
## The following draw:graphic and presentation:presentation share the same elements, but were used in different applications
## 2) Unless the stylable element is from @style:family="draw:graphc" or "presentation:presenation" than inherits from "OdfStyleableShapeElement"
#set ($useOdfStyleableShapeElement = false)
#set ($elementStyleFamily=${odfModel.getStyleFamilies($element)})
#foreach($familyName in $elementStyleFamily)
#if (${familyName}=="draw:graphic" || ${familyName}=="presentation:presentation")
## 3) Otherwise ever ODF element inherits from "OdfElement"
#set ($useOdfStyleableShapeElement = true)
#if (!${codeModel.hasSuperClass($contextNode)} && !${codeModel.hasSuperClass($baseName)})
#set ($superClassName = "OdfStyleableShapeElement")
#set ($superClassPackageName = "org.odftoolkit.odfdom.dom.element")
#end
#break
#end
#end##loop-end
#set ($firstfamily = ${xmlModel.camelCase($xmlModel.extractLocalName($odfModel.getStyleFamilies($element).get(0)))})
#else##styleable-else
#set ($stylable = false)
#if (!${codeModel.hasSuperClass($contextNode)} && !${codeModel.hasSuperClass($baseName)})
contextNode $contextNode
!{codeModel.hasSuperClass(contextNode)} !${codeModel.hasSuperClass($contextNode)}
!{codeModel.hasSuperClass(baseName)} !${codeModel.hasSuperClass($baseName)}
#set ($superClassName = "OdfElement")
#set ($superClassPackageName = "org.odftoolkit.odfdom.pkg")
#end
#end
## STYLE SETTING (END)
##
## Begin Code
#include('copyright.txt')
/*
 * This file is automatically generated.
 * Don't edit manually.
 */
package org.odftoolkit.odfdom.dom.element.${base.getNamespacePrefix()};

##
## ---------------------------------------------------
##  Imports
## ---------------------------------------------------
##
import org.odftoolkit.odfdom.pkg.OdfFileDom;
import org.odftoolkit.odfdom.pkg.OdfName;
import org.odftoolkit.odfdom.dom.OdfDocumentNamespace;
import org.odftoolkit.odfdom.dom.element.OdfStyleBase;
import org.odftoolkit.odfdom.dom.element.OdfStylableElement;
import org.odftoolkit.odfdom.dom.style.OdfStyleFamily;
import org.odftoolkit.odfdom.dom.element.OdfStyleableShapeElement;
#foreach ($attribute in ${base.getBaseAttributes().withoutMultiples()})
#if ($attribute == "*")
#set ($anyattribute = true)
#else
import org.odftoolkit.odfdom.dom.attribute.${attribute.getNamespacePrefix()}.${xmlModel.camelCase($attribute)}Attribute;
#end
#end
## evaluating super class for class "extends"
## super class takes precedence over implicit/default base classes
## super class of base takes precedence over child superclass
#if (${codeModel.hasSuperClass($contextNode)})
#set ($superClassPackageName = ${codeModel.getSuperClassPackageName($contextNode)})
#set ($superClassName = ${codeModel.getSuperClassName($contextNode)})
#end
#if (${codeModel.hasSuperClass($baseName)})
#set ($superClassPackageName = ${codeModel.getSuperClassPackageName($baseName)})
#set ($superClassName = ${codeModel.getSuperClassName($baseName)})
#end
#if((${codeModel.hasSuperClass($contextNode)} || ${codeModel.hasSuperClass($baseName)}) && $superClassPackageName != "org.odftoolkit.odfdom.dom.element.${base.getNamespacePrefix()}")
import ${superClassPackageName}.${superClassName};
#end

##
## ---------------------------------------------------
##  Class
## ---------------------------------------------------
##
/**
 * DOM implementation of OpenDocument base element
 *
#if ($anyattribute)
 * This class can have any org.w3c.dom.Attribute attribute.
#end
 */
public abstract class $className extends $superClassName {

	/**
	 * Create the instance of <code>$className</code>
	 *
	 * @param  ownerDoc     The type is <code>OdfFileDom</code>
	 * @param  elementName	The type is <code>OdfName</code>
#if ($stylable && ($useOdfStyleableShapeElement == false))
	 * @param  styleFamily	The type is <code>OdfStyleFamily</code>
	 * @param  styleAttrName	The type is <code>OdfName</code>
	 */
	public ${className}(OdfFileDom ownerDoc, OdfName elementName, OdfStyleFamily styleFamily, OdfName styleAttrName) {
		super(ownerDoc, elementName, styleFamily, styleAttrName);
	}
#else
	 */
	public ${className}(OdfFileDom ownerDoc, OdfName elementName) {
		super(ownerDoc, elementName);
	}
#end

##
## ---------------------------------------------------
##  Attribute getters and setters
## ---------------------------------------------------
##
#foreach ($attr in ${base.getBaseAttributes().withoutMultiples()})
#set ($valueObject = "String")
#set ($simpleValue = "")
#set ($dataTypes = ${attr.getDatatypes().withoutMultiples()})
#set ($valueTypes = ${codeModel.getValuetypes($dataTypes)})
#foreach ($valueType in $valueTypes)
#set ($valueObject = $valueType)
#end
#set($values = ${attr.getValues().withoutMultiples()})
#if ($values.size() ==2)
#set ($trueFlag = false)
#set ($falseFlag = false)
#foreach ($value in $values)
#if ($value==true)
#set ($trueFlag = true)
#end
#if ($value==false)
#set ($falseFlag = true)
#end
#end
#if ($trueFlag and $falseFlag)
#set ($hasdatatype = true)
#set ($valueObject = "Boolean")
#end
#end
#if ($valueObject != "String" && $valueObject != "Double" && $valueObject != "Integer" && $valueObject != "Boolean")
#set ($valueObject = "String")
#end
#if ($valueObject != "String")
#set ($simpleValue = ${codeModel.getPrimitiveType($valueObject)})
#end
#if ($attr != "*")
#set ($attribute = ${attr.withMultiples()})
#set ($aNS = ${attribute.getNamespacePrefix()})
#set ($aClassName = "${xmlModel.camelCase($attribute)}Attribute")
#set ($aParam = "${xmlModel.javaCase($attribute)}Value")

	/**
	 * Receives the value of the ODFDOM attribute representation <code>$aClassName</code> , See {@odf.attribute ${attribute.getQName()}}
	 *
	 * @return - the <code>$valueObject</code> , the value or <code>null</code>, if the attribute is not set and no default value defined.
	 */
	public $valueObject get${aClassName}() {
#if ($aNS)
		$aClassName attr = ($aClassName) getOdfAttribute(OdfDocumentNamespace.${aNS.toUpperCase()}, "${attribute.getLocalName()}");
#else
		$aClassName attr = ($aClassName) getOdfAttribute("${attribute.getLocalName()}");
#end
		if (attr != null) {
#if ($simpleValue!="")
			return ${valueObject}.valueOf(attr.${simpleValue}Value());
#else
			return ${valueObject}.valueOf(attr.getValue());
#end
		}
#if ($odfModel.getDefaultAttributeValue($attr, $base))
#set ($defaultValue = ${xmlModel.escapeLiteral($odfModel.getDefaultAttributeValue($attr, $base))})
#set ($defaultValueSet = $odfModel.getDefaultAttributeValues($attr))
#if ($defaultValueSet.size()>1)
#set ($constant = $xmlModel.constantCase($defaultValue))
#if ($valueObject == "String")
		return ${aClassName}.DEFAULT_VALUE_${xmlModel.escapeKeyword($constant)};
#else
		return ${valueObject}.valueOf(${aClassName}.DEFAULT_VALUE_${xmlModel.escapeKeyword($constant)});
#end
#else
#if ($valueObject == "String")
		return ${aClassName}.DEFAULT_VALUE;
#else
		return ${valueObject}.valueOf(${aClassName}.DEFAULT_VALUE);
#end
#end
#else
		return null;
#end
	}

	/**
	 * Sets the value of ODFDOM attribute representation <code>$aClassName</code> , See {@odf.attribute ${attribute.getQName()}}
	 *
	 * @param $aParam   The type is <code>$valueObject</code>
	 */
	public void set${aClassName}($valueObject $aParam) {
		$aClassName attr = new ${aClassName}((OdfFileDom) this.ownerDocument);
		setOdfAttribute(attr);
#if ($valueObject == "String")
		attr.setValue($aParam);
#else
		attr.set${xmlModel.camelCase($simpleValue)}Value(${aParam}.${simpleValue}Value());
#end
	}
#end
#end
}
